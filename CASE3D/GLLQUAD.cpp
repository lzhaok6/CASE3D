//#include "stdafx.h"
#include "header.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <iostream>

//GLLQUAD generates the Nth order GLL integration points and weights with end points
//----------------OUTPUT GLOBAL VARIABLES-------------------------//
struct GLLQUADstruct GLLQUAD(double* Z, double* WL, int n, int SEM) {
	int i;
	GLLQUADstruct t;
	
	t.S = new double[n + 1];
	t.W = new double[n + 1];
	for (i = 0; i < n + 1; i++) {
		t.S[i] = 0.0;
		t.W[i] = 0.0;
	}

	if (SEM == 1) {
		//---------------------BEGIN GLLQUAD COMP-----------------------//
		//LHS END POINT 
		t.S[0] = -1.0;
		t.W[0] = 2 / double(n*(n + 1)); //error prone
		//INTERIOR QUADRATURE POINTS
		if (n > 1) {
			LOBATTO(n);
			for (i = 1; i <= n - 1; i++) {
				t.S[i] = Z[i - 1];
				t.W[i] = WL[i - 1];
			}
		}
		//RHS END POINT 
		t.S[n] = 1.0;
		t.W[n] = t.W[0];   //THE WEIGHT IS SYMMETRIC
		std::cout << " " << std::endl;
	}
	else { //if Gauss-Legendre points are used (FEM)
		if (n == 1) {
			t.S[0] = -sqrt(1.0 / 3.0);
			t.S[1] = sqrt(1.0 / 3.0);
			t.W[0] = 1.0;
			t.W[1] = 1.0;
		}
		else if (n == 2) {
			t.S[0] = -sqrt(3.0 / 5.0);
			t.S[1] = 0.0;
			t.S[2] = sqrt(3.0 / 5.0);
			t.W[0] = 5.0 / 9.0;
			t.W[1] = 8.0 / 9.0;
			t.W[2] = 5.0 / 9.0;
		}
		else if (n == 3) {
			t.S[0] = -sqrt(3.0 / 7.0 + 2.0 / 7.0 * sqrt(6.0 / 5.0));
			t.S[1] = -sqrt(3.0 / 7.0 - 2.0 / 7.0 * sqrt(6.0 / 5.0));
			t.S[2] = sqrt(3.0 / 7.0 - 2.0 / 7.0 * sqrt(6.0 / 5.0));
			t.S[3] = sqrt(3.0 / 7.0 + 2.0 / 7.0 * sqrt(6.0 / 5.0));
			t.W[0] = (18.0 - sqrt(30.0)) / 36.0;
			t.W[1] = (18.0 + sqrt(30.0)) / 36.0;
			t.W[2] = (18.0 + sqrt(30.0)) / 36.0;
			t.W[3] = (18.0 - sqrt(30.0)) / 36.0;
		}
		else if (n == 4) {
			t.S[0] = -1.0 / 3.0 * sqrt(5.0 + 2.0 * sqrt(10.0 / 7.0));
			t.S[1] = -1.0 / 3.0 * sqrt(5.0 - 2.0 * sqrt(10.0 / 7.0));
			t.S[2] = 0.0;
			t.S[3] = 1.0 / 3.0 * sqrt(5.0 - 2.0 * sqrt(10.0 / 7.0));
			t.S[4] = 1.0 / 3.0 * sqrt(5.0 + 2.0 * sqrt(10.0 / 7.0));
			t.W[0] = (322.0 - 13.0 * sqrt(70.0)) / 900.0;
			t.W[1] = (322.0 + 13.0 * sqrt(70.0)) / 900.0;
			t.W[2] = 128.0 / 225.0;
			t.W[3] = (322.0 + 13.0 * sqrt(70.0)) / 900.0;
			t.W[4] = (322.0 - 13.0 * sqrt(70.0)) / 900.0;
		}
		else if (n == 5) {
			t.S[0] = -0.9324695142031521;
			t.S[1] = -0.6612093864662645;
			t.S[2] = -0.2386191860831969;
			t.S[3] = 0.2386191860831969;
			t.S[4] = 0.6612093864662645;
			t.S[5] = 0.9324695142031521;
			t.W[0] = 0.1713244923791704;
			t.W[1] = 0.3607615730481386;
			t.W[2] = 0.4679139345726910;
			t.W[3] = 0.4679139345726910;
			t.W[4] = 0.3607615730481386;
			t.W[5] = 0.1713244923791704;
		}
		else if (n == 6) {
			t.S[0] = -0.9491079123427585;
			t.S[1] = -0.7415311855993945;
			t.S[2] = -0.4058451513773972;
			t.S[3] = 0.0;
			t.S[4] = 0.4058451513773972;
			t.S[5] = 0.7415311855993945;
			t.S[6] = 0.9491079123427585;
			t.W[0] = 0.1294849661688697;
			t.W[1] = 0.2797053914892766;
			t.W[2] = 0.3818300505051189;
			t.W[3] = 0.4179591836734694;
			t.W[4] = 0.3818300505051189;
			t.W[5] = 0.2797053914892766;
			t.W[6] = 0.1294849661688697;
		}
		else if (n == 7) {
			t.S[0] = -0.9602898564975363;
			t.S[1] = -0.7966664774136267;
			t.S[2] = -0.5255324099163290;
			t.S[3] = -0.1834346424956498;
			t.S[4] = 0.1834346424956498;
			t.S[5] = 0.5255324099163290;
			t.S[6] = 0.7966664774136267;
			t.S[7] = 0.9602898564975363;
			t.W[0] = 0.1012285362903763;
			t.W[1] = 0.2223810344533745;
			t.W[2] = 0.3137066458778873;
			t.W[3] = 0.3626837833783620;
			t.W[4] = 0.3626837833783620;
			t.W[5] = 0.3137066458778873;
			t.W[6] = 0.2223810344533745;
			t.W[7] = 0.1012285362903763;
		}
		else if (n == 8) {
			t.S[0] = -0.9681602395076261;
			t.S[1] = -0.8360311073266358;
			t.S[2] = -0.6133714327005904;
			t.S[3] = -0.3242534234038089;
			t.S[4] = 0.0;
			t.S[5] = 0.3242534234038089;
			t.S[6] = 0.6133714327005904;
			t.S[7] = 0.8360311073266358;
			t.S[8] = 0.9681602395076261;
			t.W[0] = 0.0812743883615744;
			t.W[1] = 0.1806481606948574;
			t.W[2] = 0.2606106964029354;
			t.W[3] = 0.3123470770400029;
			t.W[4] = 0.3302393550012598;
			t.W[5] = 0.3123470770400029;
			t.W[6] = 0.2606106964029354;
			t.W[7] = 0.1806481606948574;
			t.W[8] = 0.0812743883615744;
		}
		else if (n > 8 && mappingalgo == 5) {
			std::cout << "out of the definition range" << std::endl;
			system("PAUSE ");
		}

	}


	return t;
}
